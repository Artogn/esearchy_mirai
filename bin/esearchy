#!/usr/bin/env ruby

## Copyright 2012, Matias Pablo Brutti  All rights reserved.
##
## Esearchy is free software: you can redistribute it and/or modify it under
## the terms of version 3 of the GNU Lesser General Public License as
## published by the Free Software Foundation.
##
## Esearchy is distributed in the hope that it will be useful, but WITHOUT ANY
## WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
## FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
## more details.
##
## You should have received a copy of the GNU Lesser General Public License
## along with ESearchy.  If not, see <http://www.gnu.org/licenses/>.

unless Kernel.respond_to?(:require_relative)
  module Kernel
    def require_relative(path)
      require File.join(File.dirname(caller[0]), path.to_str)
    end
  end
end

require 'getoptlong'
PATH = '../lib/esearchy/'
require_relative "../lib/esearchy"

$hostname = `hostname`.strip
$debug = false
$backtrace = false

opts = GetoptLong.new(
  [ '--help', '-h', GetoptLong::NO_ARGUMENT ],
  [ '--version', '-V', GetoptLong::NO_ARGUMENT ],
  [ '--debug', '-d', GetoptLong::NO_ARGUMENT ],
  [ '--verbose', '-v', GetoptLong::NO_ARGUMENT ],
  [ '--backtrace', '-b', GetoptLong::NO_ARGUMENT ],
  [ '--proxy','-P', GetoptLong::REQUIRED_ARGUMENT ]
)

opts.each do |opt, arg|
  case opt
    when '--help' then
      # BEGIN OF HELP
      Display.logo
      puts "H  E  L  P:\n"
      puts ""
      puts "\t--help, -h"
      puts "\t\tell I guess you know this one."
      puts ""
      puts "\t--version, -V"
      puts "\t\tEsearchy's version"
      puts ""
      puts "\t--debug, -d"
      puts "\t\tUse the interactive shell in debug mode"
      puts "\t--verbose, -v"
      puts "\t\tUse the interactive shell in debug mode"
      puts ""
      puts "\t--proxy, -P [127.0.0.1:8080]"
      puts "\t\tSetup a proxy."
      puts ""
      puts "Copyright 2012 -- FreedomCoder"
      #END OF HELP
      exit(0)
    when '--version' then
      puts " ESearchy version #{ESearchy::VERSION}"
      exit(0)
    # ADD / REMOVE SERVER
    when '--debug' then
      $debug = true
    when '--verbose' then
      $verbose = true
    when '--backtrace' then
      $backtrace = true
    when '--proxy' then
      require 'socksify'
      url, port = arg.split(":")
      TCPSocket::socks_server = url
      TCPSocket::socks_port = port.to_i
    else
      Display.error "Unknown command. Please try again"
      exit(0)
  end
end

system ("ulimit -s 20000")
a = ESearchy::UI::Console.new({})
a.run
